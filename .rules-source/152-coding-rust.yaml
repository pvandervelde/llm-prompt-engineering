- name: rust-design-api-boundaries
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [architect, code, debug, test]
  apply-to:
    - "**"
  text: |
    Minimize the public surface area. Expose only what is necessary using `pub(crate)` or `pub(super)`
    where appropriate. Use `#[doc(hidden)]` on internals not meant for public use.

- name: rust-avoid-unnecessary-allocation
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [architect, code, debug, test]
  apply-to:
    - "**"
  text: |
    Prefer `&str` or `Cow<'_, str>` over `String` when borrowing is sufficient. Avoid `Vec` when arrays
    or slices suffice. Optimize for minimal allocation in performance-sensitive or embedded code.

- name: rust-favour-traits-over-closures
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [architect, code, debug, test]
  apply-to:
    - "**"
  text: |
    Use traits to define behavior and interfaces. Prefer trait objects or generics over closures for
    polymorphism. This improves type safety and reduces runtime overhead.

- name: rust-compile-first
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug, architect]
  apply-to:
    - "**"
  text: |
    All Rust code suggestions must be valid and compile without errors. Prefer suggestions that are `cargo check`-safe.
    If the code depends on uncertain types, traits, or lifetimes, ask clarifying questions or break the solution
    into smaller, verifiable steps.

- name: rust-pedantic-mode
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug, architect]
  apply-to:
    - "**"
  text: |
    Avoid unsafe code, unnecessary uses of `unwrap`, trait abuse, or macro-heavy logic.
    Prioritize clarity, safety, and correctness over cleverness or brevity.

- name: rust-error-design
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug, architect]
  apply-to:
    - "**"
  text: |
    Use `thiserror` to define custom error types. Return informative error messages that clearly describe the
    nature of the error and, if possible, how to resolve it.

- name: rust-diag-checklist
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug, architect]
  apply-to:
    - "**"
  text: |
    Before presenting final Rust code, run an internal diagnostic checklist:
    - Are all types correct?
    - Are all `Result` or `Option` paths handled?
    - Are lifetimes correctly handled?
    - Is ownership respected?
    - Are tests present or explicitly justified?
    - Have all assumptions been stated?

- name: rust-element-ordering
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug, architect]
  apply-to:
    - "**"
  text: |
    Use the following order for elements in a module. Within each section (constants, traits, structs,
    enums, functions), order items alphabetically by their name. Do not mix `impl` blocks and functions
    across struct/enum boundaries; keep each type and its implementation(s) together. The order is
    as follows:
    - imports - organized by standard library, third-party crates, and local modules
    - constants
    - traits
    - structs with their implementations.
    - enums with their implementations.
    - functions
    - the main function

- name: rust-documentation
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    For public items documentation comments are always added. For private items
    documentation comments are added when the item is complex or not self-explanatory. Use `///` for
    documentation comments and `//!` for module-level documentation. Add examples to the documentation
    comments when possible.

- name: rust-modules
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code]
  apply-to:
    - "**"
  text: |
    When making modules in a crate create a `<module_name>.rs` file in the `src`
    directory. If the module is large enough to warrant its own directory, create a directory with the
    same name as the module. Place any source files for the module in the directory.

- name: rust-error-handling
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug]
  apply-to:
    - "**"
  text: |
    Use the `Result` type for functions that can return an error. Use the `?` operator
    to propagate errors. Avoid using `unwrap` or `expect` unless you are certain that the value will not be
    `None` or an error.

- name: rust-error-messages
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug]
  apply-to:
    - "**"
  text: |
    Use clear and descriptive error messages. Avoid using generic error messages
    like "an error occurred". Instead, provide specific information about what went wrong and how to fix it.

- name: rust-error-types
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug]
  apply-to:
    - "**"
  text: |
    Use custom error types for your application. This will help you provide more
    meaningful error messages and make it easier to handle errors in a consistent way. Use the `thiserror`
    crate to define custom error types.

- name: rust-test-location
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, test, debug]
  apply-to:
    - "**"
  text: |
    Put unit tests in their own file. They are placed next to the file they
    are testing and are named `<file_under_test>_tests.rs`. Reference them from the file under test with
    an import, which is placed at the end of the other imports and usings. This pattern separates test logic from
    business logic, improving clarity and minimizing rebuild times during development. This will look something like:

    ``` rust
    #[cfg(test)]
    #[path = "<file_under_test>_tests.rs"]
    mod tests;
    ```

- name: rust-ci
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code, test]
  apply-to:
    - "**"
  text: |
    Run
    - `cargo check`, `cargo fmt`, and `cargo clippy` as part of the CI pipeline to ensure that the code
      follows the correct formatting and style.
    - Use `cargo test` to run tests. Ensure that doc tests are also run. Collect coverage information
      using `cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info`.
    - Use `cargo mutants` to run mutation tests if configured.
    - Use `cargo audit` to check for security vulnerabilities in dependencies.
    - Use `cargo deny` to check for license issues in dependencies.

- name: rust-release-management
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code]
  apply-to:
    - "**"
  text: |
    Use tooling to manage the release process. This includes creating release notes, tagging releases,
    and managing version numbers.

- name: rust-release-notes
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code]
  apply-to:
    - "**"
  text: |
    Use `gitcliff` to generate release notes.
