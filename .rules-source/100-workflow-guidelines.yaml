# metadata: merge_with_others=true

- name: wf-api-design
  scope: repository
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    Design APIs following REST principles, GraphQL best practices, or appropriate RPC patterns.
    Version APIs appropriately using URL versioning, header versioning, or content negotiation.
    Document APIs with OpenAPI/Swagger, GraphQL schema, or equivalent documentation tools.
    Consider backward compatibility and implement graceful deprecation strategies. Use consistent
    naming conventions, error handling patterns, and response formats across all endpoints.

- name: wf-branch-selection
  scope: user
  editors:
    - name: copilot
      modes: [agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code, test, debug]
  apply-to:
    - "**"
  text: |
    Each task is done on its own branch. Before you start a task check that you are on a sensible
    branch. Code is *never* directly committed to the `main` or `master` branches. If you are on the `main`
    or `master` branch create a new local branch from `main` or `master` for your changes and switch to that branch.
    For example `git checkout -b feature-add-new-user main` or `git checkout -b fix-bug-in-login-page master`.
    If you are not sure if the current branch is sensible, ask the user to clarify.

- name: wf-ci
  scope: user
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code, test]
  apply-to:
    - "**"
  text: |
    All changes should be checked with a continuous integration (CI) tool before being
    merged into the main branch. Use CI tools to run tests, check code style, and perform other checks
    automatically.

- name: wf-code-style
  scope: repository
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug, test]
  apply-to:
    - "**"
  text: |
    All code should be easy to understand and maintain. Use clear and descriptive
    names for variables, functions, and classes. Always follow the coding standards and best practices
    for the programming language being used.

- name: wf-code-tasks
  scope: user
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, debug, test]
  apply-to:
    - "**"
  text: |
    Coding starts with an implementation issue. During the session we only solve the
    implementation issue. If we find other changes that we want to make, we create new issues for
    them.

- name: wf-coding-effort
  scope: repository
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    Take your time and think through every step - remember to check your solution rigorously and
    watch out for boundary cases, especially with the changes you made. Your solution must be perfect.
    If not, continue working on it. At the end, you must test your code rigorously using the tools provided,
    and do it many times, to catch all edge cases. If it is not robust, iterate more and make it perfect.
    Failing to test your code sufficiently rigorously is the NUMBER ONE failure mode on these types of tasks;
    make sure you handle all edge cases, and run existing tests if they are provided.

- name: wf-coding-flow
  scope: user
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    When solving a problem by writing code follow the coding flow steps below. This is a general guideline
    for coding tasks. It is not a strict rule, but it is a good practice to follow. The steps are:
    1. Deeply understand the task at hand. Read the issue description, design document, and any other relevant information. Follow the guidelines in `wf-issue-use`, `wf-find-issue`.
    2. Explore the codebase. If you are not familiar with the codebase, read the documentation, and explore the code to understand how it works.
    3. Think hard about the task and how to solve it. If you need to, ask for clarification or additional information.
    4. Develop a detailed plan for the task. This includes identifying the changes that need to be made, the files that need to be modified, and the tests that need to be written.
    5. Create a design document for the task if there are a lot of changes to be made. Follow the guidelines in `wf-design-before-code` and `wf-design-spec-layout`.
    6. Create a branch for the task. Follow the guidelines in `wf-branch-selection` and the source control guidelines.
    7. Iterate writing code and running tests. Make small, incremental changes that logically follow from your investigation and plan. Always add or update tests and execute the tests. After each change run the tests. If there are any failures, correct them before continuing. When the tests pass commit the changes. Follow the guidelines in `wf-code-tasks`, `wf-code-style`, `wf-unit-test-coverage`, `wf-test-methods`, `coding-review-before-commit`, and the language specific guidelines.
    8. Confirm that the code is correct and meets the requirements of the task. Follow the guidelines in `wf-coding-effort`, `wf-issue-use`, and `wf-find-issue`.
    9. Document the code. Follow the guidelines in `wf-documentation`.
    10. Create a pull request for the code. Follow the guidelines in `wf-pull-request` and the source control guidelines.

- name: wf-database-changes
  scope: repository
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    Handle database schema changes with proper migration scripts that can be applied and rolled back safely.
    Test migrations on realistic data volumes and scenarios. Plan rollback strategies for all database changes.
    Use database versioning tools appropriate for your stack (Liquibase, Flyway, Django migrations, etc.).
    Never modify existing migrations after they've been applied to production. Consider data migration impact
    on application downtime and plan accordingly.

- name: wf-deployment
  scope: user
  editors:
    - name: copilot
      modes: [agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code]
  apply-to:
    - "**"
  text: |
    All code should be deployed to a staging environment before being deployed to
    production. This will help ensure that the code is working as expected and that there are no
    regressions. Use continuous integration and continuous deployment (CI/CD) tools to automate the
    deployment process.

- name: wf-design-before-code
  scope: user
  editors:
    - name: copilot
      modes: [ask, agent]
    - name: cline
      modes: [plan]
    - name: roo
      modes: [architect]
  apply-to:
    - "**"
  text: |
    Before writing any code for a new feature or bug fix, create a design document
    that outlines the architecture, data flow, and any other relevant details. Place design documents in the
    `specs` directory of the repository.

- name: wf-design-spec-layout
  scope: user
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan]
    - name: roo
      modes: [architect]
  apply-to:
    - "**"
  text: |
    The design document should be in markdown format and any diagrams should
    should follow the mermaid language. Follow the markdown style guide and ensure that lines are no
    longer than 100 characters. It should follow the following structure:
    - Title
    - Problem description
    - Surrounding context
    - Proposed solution
      - Design goals
      - Design constraints
      - Design decisions
      - Alternatives considered
    - Design
      - Architecture
      - Data flow
      - Module breakdown
      - Other relevant details
    - Conclusion

- name: wf-documentation
  scope: repository
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    The coding task is not complete without documentation. All code should be
    well-documented. Use comments to explain the purpose of complex code and to provide context for
    future developers. Use docstrings to document functions, classes, and modules. The documentation
    should be clear and concise.

- name: wf-documentation-standards
  scope: repository
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    Follow the documentation standards and best practices for the
    programming language being used.

- name: wf-find-issue
  scope: user
  editors:
    - name: copilot
      modes: [ask, agent]
    - name: cline
      modes: [plan]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    When searching for issues
    do an approximate comparison of the issue title and description with the task at hand. If you find multiple
    issues that are an approximate match, ask the user to clarify which issue should be used.

- name: wf-incident-response
  scope: user
  editors:
    - name: copilot
      modes: [ask, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    For production incidents, follow established incident response procedures: assess impact,
    implement immediate mitigation, communicate status to stakeholders, conduct root cause analysis,
    and implement preventive measures. Document all incidents with timelines, actions taken, and
    lessons learned. Use post-mortem reviews to improve processes and prevent recurrence.
    Maintain incident response runbooks and keep them up to date.

- name: wf-issue-creation
  scope: user
  editors:
    - name: copilot
      modes: [agent]
    - name: cline
      modes: [plan]
    - name: roo
      modes: [architect, code, test, debug]
  apply-to:
    - "**"
  text: |
    All issues should be created in the repository. This includes bugs, new features,
    and any other changes to the codebase. Issues should be created for all tasks, even if they are small.
    Issues should be linked together to show the relationship between them.

- name: wf-issue-template
  scope: user
  editors:
    - name: copilot
      modes: [agent]
    - name: cline
      modes: [plan]
    - name: roo
      modes: [architect, code, test, debug]
  apply-to:
    - "**"
  text: |
    When creating an issue use the issue templates. Issue templates can be found in the
    `./.github/ISSUE_TEMPLATE` directory.

- name: wf-issue-use
  scope: user
  editors:
    - name: copilot
      modes: [ask, agent]
    - name: cline
      modes: [plan]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    Before starting any task determine if you need an issue for it. If so search for the
    appropriate issue in the issue tracker. If there is no issue, suggest to create one.

- name: wf-monitoring-observability
  scope: repository
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    Include comprehensive logging, metrics, and monitoring for all production code. Use structured
    logging with appropriate log levels and correlation IDs. Implement health checks and readiness
    probes for services. Set up alerting for critical metrics and error rates. Plan for debugging
    and troubleshooting in production environments. Use distributed tracing for complex systems.
    Monitor performance, availability, and business metrics.

- name: wf-pull-request
  scope: user
  editors:
    - name: copilot
      modes: [agent, edit]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code, test, debug]
  apply-to:
    - "**"
  text: |
    Create a pull request (PR) for all changes made to the codebase.
    The PR should include a description which changes were made, why the changes were made, links to
    relevant issue numbers, results from testing, and any other relevant information. Assign the PR to the
    person who created it. Always invite copilot on the review.

- name: wf-release-management
  scope: user
  editors:
    - name: copilot
      modes: [agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code]
  apply-to:
    - "**"
  text: |
    Use a release management tool to manage the release process. This
    includes creating release notes, tagging releases, and managing version numbers. Use semantic
    versioning to version releases. Use a language specific tool if it is available, otherwise use
    something like `release-please` or `semantic-release` to automate the release process.

- name: wf-release-notes
  scope: user
  editors:
    - name: copilot
      modes: [agent, edit]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code]
  apply-to:
    - "**"
  text: |
    All releases should have release notes that describe the changes made in
    the release. This includes new features, bug fixes, and any other relevant information. Use a
    consistent format for release notes to make them easy to read and understand.

- name: wf-test-methods
  scope: repository
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code, test, debug]
  apply-to:
    - "**"
  text: |
    Employ different test approaches to get good coverage of both happy path
    and error handling. Consider approaches like unit tests, property based testing, fuzz testing,
    integration tests, end-to-end tests, and performance tests. Use the appropriate testing
    frameworks and tools for the programming language being used.

- name: wf-unit-test-changes
  scope: repository
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, test, debug]
  apply-to:
    - "**"
  text: |
    Whenever you make a change, run the tests and fix any errors that are revealed. Fix one error at
    a time and provide an explanation of why you think the change you made fixes the error

- name: wf-unit-test-check
  scope: repository
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, test, debug]
  apply-to:
    - "**"
  text: |
    When you think you've solved the presented problem, run all available tests. Fix any issues that
    you find.

- name: wf-unit-test-coverage
  scope: repository
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, test, debug]
  apply-to:
    - "**"
  text: |
    All business logic should be covered by unit tests. We're aiming to cover
    all input and output paths of the code. This includes edge cases and error handling. Use coverage
    tools to measure the test coverage and use mutation testing to ensure that the tests are
    effective.

- name: wf-unit-test-create-new
  scope: repository
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [code, test, debug]
  apply-to:
    - "**"
  text: |
    Whenever you create a new test, run it to verify that it passes. If it doesn't pass, revise
    either the test (or the code it tests) until the test passes.
