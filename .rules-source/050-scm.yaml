# metadata: merge_with_others=true

- name: scm-branch-naming
  scope: repository
  editors:
    - name: copilot
      modes: [agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code, test, debug]
  apply-to:
    - "**"
  text: |
    The branch name should be a brief summary of the changes being made. Branch
    names should be in lowercase and use hyphens to separate words. For example, `fix-bug-in-login-page`
    or `feature-add-new-user`.

- name: scm-commit-message
  scope: repository
  editors:
    - name: copilot
      modes: [edit, agent]
    - name: cline
      modes: [act]
    - name: roo
      modes: [architect, code, test, debug]
  apply-to:
    - "**"
  text: |
    For commit messages the
    type should be one of the following: `feat`, `fix`, `chore`, `docs`,
    `style`, `refactor`, `perf`, `test`. The scope should be the name of the module or component being changed. The subject should
    be a short description of the change. The `work_item_ref` is one of the following issue references:
    `references` or `related to` followed by the issue number.
    Finally those parts make the following format for commit messages:

    ```text
    type(scope): subject

    description

     references <work_item_ref>
    ```

- name: scm-git-pull-request-review
  scope: user
  editors:
    - name: copilot
      modes: [ask, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    All pull requests should be reviewed by at least one other developer and
    GitHub copilot before being merged into the main branch.

- name: scm-git-pull-request-template
  scope: user
  editors:
    - name: copilot
      modes: [agent, edit]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code, test, debug]
  apply-to:
    - "**"
  text: |
    Use the pull request template to provide a template for the pull request description. The pull request
    template can be found in the `./.github/PULL_REQUEST_TEMPLATE.md` file. If there is no pull request template,
    use a sensible layout for the pull request description.

- name: scm-git-pull-request-title
  scope: repository
  editors:
    - name: copilot
      modes: [agent, edit]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, code, test, debug]
  apply-to:
    - "**"
  text: |
    The pull request title should follow the conventional commit format.
    `<type>(<scope>): <subject>` where `type` is one of the following: `feat`, `fix`, `chore`, `docs`,
    `style`, `refactor`, `perf`, `test`.

- name: scm-hygiene
  scope: repository
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    Commit changes frequently and in small increments. Follow the `scm-commit-message` format for commit messages. Use
    `git fetch --prune` and `git pull` to update your local branch before pushing changes.

- name: scm-security
  scope: repository
  editors:
    - name: copilot
      modes: [ask, edit, agent]
    - name: cline
      modes: [plan, act]
    - name: roo
      modes: [architect, ask, code, debug, test]
  apply-to:
    - "**"
  text: |
    Never commit secrets, API keys, passwords, or other sensitive data to version control. Use
    .gitignore for build artifacts, temporary files, and OS-specific files. Sign commits for
    sensitive repositories using GPG keys. Use branch protection rules to enforce review
    requirements and status checks. Rotate any accidentally committed secrets immediately.
    Use git hooks to prevent sensitive data commits when possible.
